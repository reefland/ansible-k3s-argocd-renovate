---

# [ Linux OS Configuration ]#######################################################################
os:
  central_logging:
    packages:
      - lnav                                      # Handy program to watch logs in real-time

# [ rsyslog Configuration ]########################################################################
rsyslog:
  config_file: "/etc/rsyslog.conf"                # path to rsyslog conf file
  central_config: "/etc/rsyslog.d/central.conf"   # path to central logging config
  logrotate_config: "/etc/logrotate.d/central"    # path to logrotate config file

  logging_path:
    owner: "syslog"
    group: "syslog"
    mode: "0750"

# [ K3s Installation Settings ]####################################################################
kubeconfig_path: "/home/{{ install.os.non_root_user.name }}/.kube/config"

k3s:
  # Location for K3s installation script
  url: "https://get.k3s.io"

  node_token_path: "/var/lib/rancher/k3s/server/node-token"
  manifests_path: "/var/lib/rancher/k3s/server/manifests/"

  packages:
    - "python3-pip"       # Python Package Manager
    - "xfsprogs"          # XFS File System Support
    - "apparmor"          # AppArmor for ContainerD
    - "apparmor-utils"
    - "usbutils"          # lsusb command
    - "nfs-common"        # nfs mounts / client support

  packages_pip:           # Packages required for Ansible to issue Kubernetes and commands
    - "openshift"
    - "pyyaml"
    - "kubernetes"

  k3s_init_options: >-
    {% if groups['k3s_control'] | length > 1 -%}
    {% if inventory_hostname == groups['k3s_control'][0] -%}
    --cluster-init{%- else %}
    --server https://{{ groups['k3s_control'][0] }}:6443{%- endif %}
    --token {{ K3S_TOKEN | default('top_secret') }}{%- endif %}

  # This becomes the "INSTALL_K3S_EXEC=" CLI parameter
  k3s_exec_options:
    - "{{ k3s_cli_var | default('') | join(' ') }}"               # Options set in inventory or hosts vars
    - "{{ install.k3s.k3s_cli_var | default('') | join(' ') }}"   # Options set in defaults/main.yml
    - "--kubelet-arg=image-gc-low-threshold=50"                   # End Garbage Collection of Images at 50% disk space free
    - "--kubelet-arg=image-gc-high-threshold=65"                  # Start Garbage Collection of Images at 65% disk space used

  # When "disable_local_path_as_default_storage_class = true" this will be added to k3s_exec_options
  cli_disable_storage_options:
    - "--disable local-storage"

  # When "install.kube_vip.lb.enabled == true"
  # this will be added to k3s_exec_options
  cli_disable_loadbalancer_options:
    - "--disable servicelb"

  zfs:
    zvol:
      volume_name: "rancher"
      # ZFS Mount point for K3S rancher directory
      mountpoint: "/var/lib/rancher"

# [ Sealed Secrets Configuration Settings ]########################################################
sealed_secrets:
  # This defines the default name used in Helm Chart, does not overwrite or change name to be used
  controller_name: "sealed-secrets"

  # Sealed Secret Scope:
  # "strict" (default): Sealed Secret uses secret name and the namespace. You can’t change the
  #                     name or the namespaces of your SealedSecret once you've created it.
  # "namespace-wide"    This scope allows you to freely rename the SealedSecret within the
  #                     namespace for which you’ve sealed the Secret.
  # "cluster-wide"      This scope allows you to freely move the Secret to any namespace and give
  #                     it any name you wish.
  # This can be overridden per invocation of "process_secret.yml" vai deploy_secret.scope variable.
  # When this variable is not set, the default_scope below will be used.
  default_scope: "strict"

  # Annotation that can be applied to an existing unsealed secret to mark it managed by Sealed
  # Secrets to allow it to be overwritten by Sealed Secrets.
  replace_unsealed_secrets_annotation: "sealedsecrets.bitnami.com/managed=true"

  # Define name of Sealed Secret Private to use
  use_pre_generated_private_key_name: "sealed-secrets-key"

  # Define label to be applied to pre-generated private key
  use_pre_generated_private_key_label: "sealedsecrets.bitnami.com/sealed-secrets-key: active"

# #[ Let's Encrypt Configuration Settings ]########################################################
lets_encrypt:

  le_staging_server: "https://acme-staging-v02.api.letsencrypt.org/directory"
  le_production_server: "https://acme-v02.api.letsencrypt.org/directory"

# #[ Longhorn Configuration Setting ]###############################################################
longhorn:

  packages:
    - open-iscsi

  zfs:
    # Format of the filesystem used for Longhorn storage
    zvol:
      format: "xfs"

# [ Democratic-csi iSCSI & NFS Installation Settings ]#############################################
democratic_csi:
  iscsi:
    packages:
      - open-iscsi
      - lsscsi
      - sg3-utils
      - multipath-tools
      - scsitools

  nfs:
    packages:
      - libnfs-utils
      - nfs-common

# [ Prometheus Operator Installation Settings ]####################################################
prometheus_op:
  packages:
    - lm-sensors                          # For Hardware temperature monitoring

  release_name: "kube-prometheus-stack"   # To find name of services

  # Project URL
  zfs_exporter:
    url: "https://github.com/pdf/zfs_exporter/releases/download"
    bin: "/usr/local/bin/zfs_exporter"
    IP: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    port: "9134"
