---
###[ Ansible Configuration Options ]#############################################################
# Do not log sensitive information / tokens, etc.  Maybe be handy to set to "false" during
# troubleshooting if you need to see ansible vault secret values.
no_log_secrets: false

install:
  ###[ Linux OS Configuration ]####################################################################
  os:
    non_root_user:                            # Some specifics about the non-root user
      name: "kube"
      shell: "/bin/bash"
      groups: "sudo"

    allow_passwordless_sudo: true             # Allow non-root use to passwordless sudo

    remove_packages:                             
      enabled: true
      packages:
        - "snapd"                             # Remove Snapd Demon, we don't need it.

    # Send all logs to a centralized logging server. This will be the 1st server defined
    # within the "k3s_control" group. All other cluster members will send logs to this system.
    # All logs from k3s hosts will be stored under: /var/log/central/<hostname>.log
    
    central_logging:                          
      log_path: "/var/log/central"            # Directory on central server to hold logs

  ### [ K3s Installation Settings ]################################################################
  k3s:
    # CLI_options are passed directly to install script "as-is", you can add to list.
    cli_options:
      # Do not start service after installation as it will have issues with ZFS
      - "INSTALL_K3S_SKIP_START=true"
      
      # This is to pin a specific version of k3s for initial installation
      # Select Release: https://github.com/k3s-io/k3s/releases
      - "INSTALL_K3S_VERSION={{k3s_install_version|default('v1.23.5+k3s1')}}"
      
      # Select installation channel to use (stable, latest, testing)
      # - "INSTALL_K3S_CHANNEL=latest"
    
    k3s_cli_var:
      - "--disable traefik"                   # Install a stable Traefik via helm instead
      - "--kube-apiserver-arg=feature-gates=MixedProtocolLBService=true"  # Allow Load Balancer to use TCP & UDP Ports

    # Define handy alias names for commands
    alias:
      enabled: true
      entries:
        - { alias_name: "k", command: "kubectl" }   # alias for kubectl  ($ k get all -A)

  ###[ Containerd Installation Settings ]##########################################################
  containerd:
    enabled: true

    # Hint to find the ZFS pool & dataset to create containerd mount point
    zfs:
      # detect_uuid will determine the UUID name used for the dataset name and include it.
      # ZFS on Root guide uses a random set of characters (UUID) in the naming convention
      # such as:  "rpool/ROOT/ubuntu_3wgs2q" where "3wgs2q" is the UUID to detect.
      
      # You can set to false and set your own or set uuid to empty string.

      # End result would be a dataset name such as:  rpool/ROOT/ubuntu_3wgs2q/var/lib/containerd
      detect_uuid: false
      pool: "rpool"
      dataset_prefix: "containerd"            # "ROOT/ubuntu"
      uuid: ""                                # "_"
      dataset_postfix: ""                     # "/var/lib/containerd"

  ###[ ArgoCD Installation Settings ]##############################################################
  # ArgoCD will be used to deploy applications to K3s cluster based on manifests checked into 
  # Git repository.
  argocd:
    enabled: true

    # Select Release to install: https://artifacthub.io/packages/helm/argo/argo-cd
    install_version: "{{argocd_install_version|default('4.5.10')}}"
    
    namespace: "argocd"

    # Define secrets in vars/secrets/main.yml
    repository:
      name: "k3s-argocd-renovate"
      url: "{{ARGOCD_REPO_URL_SECRET|default('UNDEFINED_REPO_URL')}}"                 # https://github.com/<user>/<repo-name>
      username: "{{ARGOCD_REPO_USERNAME_SECRET|default('oauth')}}"                           # oauth - not really used
      password: "{{ARGOCD_REPO_PASSWORD_SECRET|default('UNDEFINED_REPO_PASSWORD_TOKEN')}}"   # Github Personal Access Token

    # Default Dashboard URL:  https://k3s.{{ansible_domain}}/argocd/
    dashboard:
      path: "/argocd"                         # URI Path for Ingress Route

  ###[ Renovate Configuration Settings ]###########################################################
  # Renovate will monitor manifests deployed to ArgoCD repositories for updates and open a PR
  # request to start the process of upgrading applications.
  renovate:
    # Select Release to install: https://github.com/renovatebot/helm-charts/releases
    install_version: "{{renovate_install_version|default('32.45.5')}}"

    namespace: "renovate"

    platform: "github"
    repositories:
      - "{{ARGOCD_REPO_URL_SECRET|default('UNDEFINED_REPO_URL') | urlsplit('path') | regex_replace('^\\/|\\/$, ''') }}"    # Hopefully the <user>/<repo-name> part of URL

    # Cron style schedule when renovate should look for updates
    schedule: "0 1 * * *"                     # At 01:00 every day

  ###[ Cert Manager Installation Settings ]########################################################
  cert_manager:
    # Select release to use:  https://github.com/cert-manager/cert-manager/releases
    install_version: "{{cert_manager_install_version|default('v1.7.1')}}"

    namespace: "cert-manager"

  ###[ Let's Encrypt Certificate Configuration ]###################################################
  lets_encrypt:
    # Define secrets in vars/secrets/main.yml
    le_api_token_name: "{{DNS_API_TOKEN_SECRET}}"  # Define the name of the API token key                                           #
    le_api_token_email: "{{AUTH_EMAIL_SECRET}}"    # Define the name of the email authorization key

    le_email_auth: "{{LE_AUTH_EMAIL_SECRET}}"      # Define the name of the Let's Encrypt Email Address
    domains: "{{LE_DOMAINS_SECRET}}"               # List of Domain Names for LetsEncrypt Certificates

    # to create prod certificates --extra-vars="le_staging=false"
    le_staging: "{{le_staging|default(true)}}"

###[ Optional Software Listed Below - Can be DISABLED ]############################################

  ###[ Kube-VIP Configuration Settings ]###########################################################
  # Kube-VIP provides HA Load Balancer for the API service and optionally LoadBalancer services
  # It can optionally also provide Load Balancer services a pool of address to use instead of
  # using MetalLB.  When enabled this will disable k3s built-in Klipper Load Balancer.
  kube_vip:
    # When enabled, you must define variable "vip_endpoint_ip" at host or group level within 
    # inventory, host_var or group_var file. This must be set to an IP address. This IP address will
    # be a Load Balanced VIP cluster wide for the API service.  You can point kubectl to this IP 
    # address.
    enabled: true

    # Select release to use: https://github.com/kube-vip/kube-vip/releases
    install_version: "{{kube_vip_install_version|default('v0.4.4')}}"

    # To use Kube-VIP Cloud Provider as LoadBalancer instead of MetalLB
    lb:
      # When enabled, this will disable k3s built-in Klipper Load Balancer and enable kube-vip
      # Cloud Provider Load Balancer instead.

      # When enabled, you must define variable "vip_lb_ip_range" at host or group level within 
      # inventory, host_var or group_var file. This must be set to an IP range or CIDR range.
      # This will define the pool of IP addresses to hand out to serviced of type LoadBalancer.
      enabled: true

      # Select release to use: https://github.com/kube-vip/kube-vip-cloud-provider/releases
      install_version: "{{kube_vip_cloud_provider_install_version|default('v0.0.2')}}"

  ###[ Traefik Installation Settings ]#############################################################
  traefik:
    # When enabled Traefik will be used as an Ingress Controller and be used to handle IngressRoutes
    # for various dashboards offered by installed software.  Traefik will be deployed as a DaemonSet
    # for High Availability.

    # When enabled, you must define variable "traefik_lb_ip" at host or group level within
    # inventory, host_var or group_var file. This must be set to an IP address WITHIN the 
    # Kube-VIP CIDR range defined in "vip_lb_ip_range" variable (above).
    enabled: true

    # Select release to use: https://github.com/traefik/traefik-helm-chart/tags
    install_version: "{{traefik_install_version|default('v10.19.4')}}"

    namespace: "traefik"                      # Add resources to this namespace

    # Traefik Dashboard
    dashboard:
      create_route: true                      # Create Ingress Router to make accessible 
      enable_https: true                      # Require HTTPS to access dashboard
      enable_basic_auth: true                 # Require Authentication to access dashboard

      # Fully Qualified Domain for ingress routes - Traefik Load Balancer address name
      # This is the DNS name you plan to point to the Traefik ingress Load Balancer IP address.
      ingress_name: '{{k3s_cluster_ingress_name|default("k3s.{{ansible_domain}}")}}'
      
      # Default Dashboard URL:  https://k3s.{{ansible_domain}}/dashboard/
      path: "/dashboard"                      # PathPrefix for dashboard

      # Define secrets in vars/secrets/main.yml
      allowed_users: "{{TRAEFIK_DASHBOARD_USERS_SECRET}}"    # Encoded users and passwords for basic authentication