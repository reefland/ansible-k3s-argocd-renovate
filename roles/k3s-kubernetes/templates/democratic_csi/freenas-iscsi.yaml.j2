csiDriver:
  # should be globally unique for a given cluster
  name: "org.democratic-csi.iscsi"

#########################################################################################
# The following will pull from the developer's "next" branch, for testing new features.
#controller:
#  driver:
#    image: democraticcsi/democratic-csi:next
#    imagePullPolicy: Always
#    logLevel: debug

#node:
#  driver:
#    image: democraticcsi/democratic-csi:next
#    imagePullPolicy: Always
#    logLevel: debug
#########################################################################################
# To confirm if the "next" image is being used by the containers:
# kubectl get pods -n democratic-csi -o jsonpath="{.items[*].spec.containers[*].image}" | tr -s '[[:space:]]' '\n' | grep next | uniq
#########################################################################################

storageClasses:
- name: freenas-iscsi-csi
  defaultClass: {{install.democratic_csi.iscsi.storage_class.default_class}}
  reclaimPolicy: {{install.democratic_csi.iscsi.storage_class.reclaim_policy}}
  volumeBindingMode: Immediate
  allowVolumeExpansion: {{install.democratic_csi.iscsi.storage_class.volume_expansion}}
  parameters:
    fsType: {{install.democratic_csi.iscsi.extent.fs_type}}
  mountOptions: []
  secrets:
    provisioner-secret:
    controller-publish-secret:
    node-stage-secret:
    node-publish-secret:
    controller-expand-secret:

volumeSnapshotClasses: []

driver:
  config:
    driver: freenas-iscsi
    instance_id:
    httpConnection:
      protocol: {{install.democratic_csi.truenas.http_connection.protocol}}
      host: {{install.democratic_csi.truenas.http_connection.host}}
      port: {{install.democratic_csi.truenas.http_connection.port}}
      apiKey: {% if install.democratic_csi.truenas.http_connection.api_key is defined %}{{install.democratic_csi.truenas.http_connection.api_key}}{% endif %}{{''}}
      allowInsecure: {{install.democratic_csi.truenas.http_connection.allow_insecure}}
      #apiVersion: 2
    sshConnection:
      host: {{install.democratic_csi.truenas.ssh_connection.host}}
      port: {{install.democratic_csi.truenas.ssh_connection.port}}
      username: {{install.democratic_csi.truenas.ssh_connection.user}}
{% if install.democratic_csi.truenas.ssh_connection.password is defined %}      password: {{install.democratic_csi.truenas.ssh_connection.password}}{% endif %}{{''}}
{% if install.democratic_csi.truenas.ssh_connection.private_key is defined %}{% filter indent(width=8) %}      privateKey: |
{{install.democratic_csi.truenas.ssh_connection.private_key}}{% endfilter %}{% endif %}{{''}}
{% if install.democratic_csi.truenas.ssh_connection.password is not defined and install.democratic_csi.truenas.ssh_connection.private_key is not defined %}  *** MUST DEFINE PASSWORD or CERTIFICATE in truenas_api_secrets.yml ***{% endif %}{{''}}
    zfs:
      # Set a comment on the zvol to identify what it belongs to
      datasetProperties:
        {% raw %}"org.freenas:description": "{{ parameters.[csi.storage.k8s.io/pvc/namespace] }}/{{ parameters.[csi.storage.k8s.io/pvc/name] }}"{% endraw %}

      datasetParentName: {{install.democratic_csi.iscsi.zfs.datasets.parent_name}}
      detachedSnapshotsDatasetParentName: {{install.democratic_csi.iscsi.zfs.datasets.snapshot_ds_name}}
      zvolCompression: {{install.democratic_csi.iscsi.zfs.zvol.compression}}
      zvolDedup:
      zvolEnableReservation: {{install.democratic_csi.iscsi.zfs.zvol.enable_reservation}}
      zvolBlocksize: {{install.democratic_csi.iscsi.zfs.zvol.blocksize}}
    iscsi:
      targetPortal: "{{install.democratic_csi.truenas.iscsi_connection.host}}:{{install.democratic_csi.truenas.iscsi_connection.port}}"
      targetPortals: [] # [ "server[:port]", "server[:port]", ... ]
      interface:{% if install.democratic_csi.truenas.iscsi_connection.interface is defined %} {{install.democratic_csi.truenas.iscsi_connection.interface}}{% endif %}{{''}}

      namePrefix: {{install.democratic_csi.iscsi.name_prefix}}
      nameSuffix: "{{install.democratic_csi.iscsi.name_suffix}}"
{% raw %}
      # Set a comment on the target and extent to identify what it belongs to
      extentCommentTemplate: "{{ parameters.[csi.storage.k8s.io/pvc/namespace] }}-{{ parameters.[csi.storage.k8s.io/pvc/name] }}"
      nameTemplate: "{{ parameters.[csi.storage.k8s.io/pvc/namespace] }}-{{ parameters.[csi.storage.k8s.io/pvc/name] }}"
{% endraw %}
      # add as many as needed
      targetGroups:
        # get the correct ID from the "portal" section in the UI
        - targetGroupPortalGroup: {{install.democratic_csi.iscsi.target_group.portal_group}}
          # get the correct ID from the "initiators" section in the UI
          targetGroupInitiatorGroup: {{install.democratic_csi.iscsi.target_group.initiator_group}}
          # None, CHAP, or CHAP Mutual
          targetGroupAuthType: {{install.democratic_csi.iscsi.target_group.auth_type}}
          # get the correct ID from the "Authorized Access" section of the UI
          # only required if using Chap
          targetGroupAuthGroup: {{install.democratic_csi.iscsi.target_group.auth_group}}
      extentInsecureTpc: true
      extentXenCompat: false
      extentDisablePhysicalBlocksize: true
      extentBlocksize: {{install.democratic_csi.iscsi.extent.block_size}}
      extentRpm: "{{install.democratic_csi.iscsi.extent.rpm}}"
      extentAvailThreshold: {{install.democratic_csi.iscsi.extent.avail_threshold}}
