---
#
# Install ArgoCD to get GitOPS methodology in place.
#

###[ Install ArgoCD ]##############################################################################
- name: Install ArgoCD Block
  block:
  - name: Create directory for ArgoCD files for non-root user
    file:
      path: "/home/{{install.os.non_root_user.name}}/argocd"
      state: directory
      mode: 0770
      owner: "{{install.os.non_root_user.name}}"
      group: "{{install.os.non_root_user.name}}"

  - name: Copy Repository Connection Template Files
    template:
      src: "templates/argocd/config/{{item}}.j2"
      dest: "/home/{{install.os.non_root_user.name}}/argocd/{{item}}"
      owner: "{{install.os.non_root_user.name}}"
      group: "{{install.os.non_root_user.name}}"
      mode: '0660'
    loop:
      - "argocd_secret.yaml"
      - "renovate_secret.yaml"

  - name: Clone Remote ArgoCD Repository
    ansible.builtin.git:
      repo: "{{install.argocd.repository.url|urlsplit('scheme')}}://{{install.argocd.repository.username}}:{{install.argocd.repository.password}}@{{install.argocd.repository.url|urlsplit('hostname')}}{{install.argocd.repository.url|urlsplit('path')}}"
      dest: "/home/{{install.os.non_root_user.name}}/argocd/init_git_repo/"
      force: yes

  - name: Create Directory Structure for ArgoCD Initial Repository
    file:
      state: directory
      dest: "/home/{{install.os.non_root_user.name}}/argocd/init_git_repo/{{ item.path }}"
      mode: 0700
      owner: "{{install.os.non_root_user.name}}"
      group: "{{install.os.non_root_user.name}}"
    with_filetree: "../templates/argocd/git_repo"
    when: item.state == "directory"

  - name: Process Template Files for ArgoCD Initial Repository
    template:
      src: "{{ item.src }}"
      dest: "/home/{{install.os.non_root_user.name}}/argocd/init_git_repo/{{ item.path }}"
      mode: 0660
      owner: "{{install.os.non_root_user.name}}"
      group: "{{install.os.non_root_user.name}}"
      force: no                                       # Do not overwrite existing files in repo (which might force old versions)
    with_filetree: "../templates/argocd/git_repo"
    when: item.state == "file"

  - name: Check if any ArgoCD Repository Files were Updates
    ansible.builtin.command:
      chdir: "/home/{{install.os.non_root_user.name}}/argocd/init_git_repo/"
      argv:
        - /usr/bin/git
        - status
    register: git_status

  - name: Add New Files Generated Files to ArgoCD Repository
    ansible.builtin.command:
      chdir: "/home/{{install.os.non_root_user.name}}/argocd/init_git_repo/"
      argv:
        - /usr/bin/git
        - add
        - --all
    when:
      - git_status.stdout.find("nothing to commit") == -1
    notify:
      - Commit Checked in Files to ArgoCD Repository

  # Ansible helm was unable to process chart dependencies, got this message:
  # Error: An error occurred while checking for chart dependencies. You may need to run `helm dependency build` to fetch missing dependencies: found in Chart.yaml, but missing in charts/ directory: argo-cd
  # Workaround - create name space manually and run dependency update directly.

  - name: Create Namespaces
    kubernetes.core.k8s:
      state: present
      name: "{{item}}"
      kind: Namespace
    loop:
      - "{{install.argocd.namespace}}"
      - "{{install.renovate.namespace}}"
    
  - name: Run Helm Dependency Update Directly
    ansible.builtin.command:
      argv:
        - /usr/sbin/helm
        - dependency
        - update
        - "/home/{{install.os.non_root_user.name}}/argocd/init_git_repo/workloads/argocd"
      creates: "/home/{{install.os.non_root_user.name}}/argocd/init_git_repo/workloads/argocd/Chart.lock"

  - name: Install ArgoCD Helm Using Local Files
    kubernetes.core.helm:
      name: argocd
      atomic: yes
      release_namespace: "{{install.argocd.namespace}}"
      chart_ref: "/home/{{install.os.non_root_user.name}}/argocd/init_git_repo/workloads/argocd"
      wait: yes

  - name: Add Repository Credentials
    kubernetes.core.k8s:
      state: present
      src:  "/home/{{install.os.non_root_user.name}}/argocd/{{item}}"
    loop:
      - "argocd_secret.yaml"
      - "renovate_secret.yaml"

  - name: Create root ArgoCD Application
    kubernetes.core.k8s:
      state: present
      src: "/home/{{install.os.non_root_user.name}}/argocd/init_git_repo/applications.yaml"

  - name: Check Argo Pods are Running
    k8s_info:
      kind: Pod
      namespace: "{{install.argocd.namespace}}"
      label_selectors:
        - "{{item}}"
      wait: yes
      wait_condition:
        type: Ready
      wait_sleep: 5
      wait_timeout: 120
    loop:
      - "app.kubernetes.io/name=argocd-server"
      - "app.kubernetes.io/name=argocd-repo-server"
      - "app.kubernetes.io/name=argocd-application-controller"
      - "app.kubernetes.io/name=argocd-applicationset-controller"
    loop_control:
      label: "{{task_names}}"
  when: 
    - inventory_hostname == groups['k3s_control'][0]
    - install.argocd.enabled|default(false)|bool == true
  tags:
    - install_argocd

# Make sure all changes are checked in before removing repository
- name: Flush Handlers
  meta: flush_handlers

# Probably not safe to leave these on the K3s instance
- name: Delete Local ArgoCD Secrets and Git Repo
  ansible.builtin.file:
    path: "/home/{{install.os.non_root_user.name}}/argocd"
    state: absent
  when: 
    - inventory_hostname == groups['k3s_control'][0]
    - install.argocd.enabled|default(false)|bool == true
  tags:
    - install_argocd
