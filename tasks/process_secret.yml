---
# This tasks will determine if Sealed Secrets are being used:
# NO - Process Secret File Referenced as-is
# YES - Convert Secret to Sealed Secret and Process Sealed Secret
#
# If "deploy_secret.delete_src" is yes, then YAML secret will be deleted,
# otherwise it will be left untouched.
#
# NOTE: Sealed Secrets converted files can be added to repositories.  No
#       reason to not delete_src as the sealed secret files will be added to
#       repository.
#
# Optional: 
#  "deploy_secret.process" if yes, then process sealed secret now.  Otherwise
#  the default is no, which assumes ArgoCD will process file instead.
#
#  "deploy_secret.scope" the Kubeseal scope to be applied to the secret.
#    - "strict" (default): Sealed Secret uses secret name and the namespace. 
#                You can’t change the name or the namespaces of your 
#                SealedSecret once you've created it.
#    - "namespace-wide"  This scope allows you to freely rename the 
#                SealedSecret within the namespace for which you’ve sealed the
#                Secret.
#    - "cluster-wide"    This scope allows you to freely move the Secret to any
#                namespace and give it any name you wish.
###############################################################################
- name: Process Secrets WITHOUT Sealed Secrets Block
  block:
  - name: Process Secret as Standard Unencrypted
    kubernetes.core.k8s:
      state: present
      src:  "{{deploy_secret.source}}"

  - name: Delete Secret After Processing
    ansible.builtin.file:
      path: "{{deploy_secret.source}}"
      state: absent
    when:
      - deploy_secret.delete_src|default(false)|bool == true

  when: 
    - inventory_hostname == groups['k3s_control'][0]
    - install.sealed_secrets.enabled|default(false)|bool == false
  tags:
    - always

###[ Process Secrets WITH Sealed Secrets ]#####################################
# The Sealed-Secret version of original secret "filename.yaml" file will be
# named "filename-sealed.yaml" when processed.  This is the name you will find
# in the repository, not the original filename.

- name: Process Secrets WITH Sealed Secrets Block
  block:
  # This will not overwrite an existing sealed secret within the repository.
  # If you want to generate a new sealed secret then delete the original first.
  - name: Encrypt Secret with Kubeseal
    ansible.builtin.shell:
      cmd: kubeseal --controller-name {{sealed_secrets.controller_name}} --scope {{deploy_secret.scope|default(sealed_secrets.default_scope)}} --format=yaml --controller-namespace {{sealed_secrets.namespace}} < "{{deploy_secret.source}}" > "{{deploy_secret.source|replace('.yaml','-sealed.yaml')}}"
      creates: "{{deploy_secret.source|replace('.yaml','-sealed.yaml')}}"

  # Determine if an existing unsealed version of the secret already exists and needs to be 
  # annotated for SealedSecret Management.
  - name: Check for existing unsealed secret version
    ansible.builtin.shell: |
      SECRET_NAME=$(kubectl apply -f "{{deploy_secret.source}}" --dry-run=client -o jsonpath="{.metadata.name}")
      NAMESPACE=$(kubectl apply -f "{{deploy_secret.source}}" --dry-run=client -o jsonpath="{.metadata.namespace}")

      if kubectl get secret $SECRET_NAME -n $NAMESPACE
      then
        kubectl annotate --overwrite secret $SECRET_NAME {{sealed_secrets.replace_unsealed_secrets_annotation}} -n $NAMESPACE
      fi
    when:
      - install.sealed_secrets.replace_unsealed_secrets|default(false)|bool == true

  - name: Process Secret as Sealed Secret
    kubernetes.core.k8s:
      state: present
      src:  "{{deploy_secret.source|replace('.yaml','-sealed.yaml')}}"
      wait: yes
      wait_condition:
        type: Synced
        status: True
    when:
      - deploy_secret.process|default(false)|bool == true
    register: sealed_secret_status

  - name: Delete Original Secret After Kubeseal Verified
    ansible.builtin.file:
      path: "{{deploy_secret.source}}"
      state: absent
    when:
      - deploy_secret.delete_src|default(false)|bool == true

  when: 
    - inventory_hostname == groups['k3s_control'][0]
    - install.sealed_secrets.enabled|default(false)|bool == true
  tags:
    - always
