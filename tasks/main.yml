---
####################################################################################################
# This script is for installing k3s distribution of Kubernetes. k3s does not have native support
# for ZFS file system (will produce overlayfs errors).  
# See: https://github.com/k3s-io/k3s/discussions/3980
#
# This script by default will also install containerd and container network plugins packages which
# is configured to support ZFS.  Then k3s configuration will be updated to use containerd.
# Based on: https://blog.nobugware.com/post/2019/k3s-containterd-zfs/

###[ Load up the secret files ]####################################################################
- name: Include Secret Files
  include_vars: "{{ item }}"
  tags: ["always"]
  loop:
    - secrets/k3s_traefik_api_secrets.yml
    - secrets/truenas_api_secrets.yml
    - secrets/longhorn_dashboard_secrets.yml
    - secrets/prometheus_dashboard_secrets.yml
    - secrets/alertmanager_dashboard_secrets.yml
  no_log: "{{no_log_secrets|default(true)}}"

###[ Load up the variable files ]##################################################################
- name: Include Var Files
  include_vars: "{{ item }}"
  tags: ["always"]
  loop:
      - os.yml
      - rsyslog.yml
      - k3s.yml
      - containerd.yml
      - helm.yml
      - longhorn.yml
      - kube_vip.yml
      - metallb.yml
      - cert_manager.yml
      - democratic-csi.yml
      - prometheus-op.yml
  loop_control:
    label: "{{item}}"

###[ Detect ZFS UUID from ZFS on Root installations ]##############################################
- name: Detect ZFS Dataset UUID
  shell:
    cmd: "{{containerd.zfs.zfs_uuid_detect_cmd}}"
  register: UUID
  tags: ["always"]
  when:
    - install.containerd.zfs.detect_uuid|default(false)|bool == true
###################################################################################################

###[ Detect & Capture Node Token when available ]##################################################
#- name: Check if node-token file exists
#  stat:
#    path: "{{k3s.node_token_path}}"
#  register: node_token_file
#  tags: ["always"]
  
#- name: Get Node Token and Add to Facts Block
#  block:
#  - name: Gather Node Token
#    slurp:
#      path: "{{k3s.node_token_path}}"
#    register: node_token_output
#    no_log: "{{no_log_secrets|default(true)}}"
#    when: node_token_file.stat.exists == true

#  - name: Clean and add node_token to facts
#    set_fact:
#      node_token: "{{ node_token_output.content | b64decode | regex_replace('\n', '')}}"
#    no_log: "{{no_log_secrets|default(true)}}"
#    when: node_token_file.stat.exists == true
#  tags: ["always"]
###################################################################################################

- name: Include Task Files
  include_tasks: "{{task_names}}"
  tags: ["always"]
  loop:
    - 00_config_rsyslog.yml
    - 00_create_non_root_user.yml
    - 01_install_k3s.yml
    - 02_install_containerd.yml
    - 03_install_helm_client.yml
    - 04_install_longhorn.yml
    - 05_validate_k3s.yml
    - 05_validate_longhorn.yml
    - 06_install_kube_vip.yml
    - 06_install_metallb.yml
    - 07_install_cert_manager.yml
    - 08_config_traefik.yml
    - 09_install_democratic_csi_iscsi.yml
    - 09_install_democratic_csi_nfs.yml
    - 10_validate_csi_iscsi.yml
    - 10_validate_csi_nfs.yml
    - 13_install_prometheus_op.yml
  loop_control:
    label: "{{task_names}}"
    loop_var: task_names


