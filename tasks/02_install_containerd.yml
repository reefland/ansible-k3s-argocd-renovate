---
# Detect ZFS UUID from ZFS on Root installations
- name: Detect ZFS Dataset UUID Block
  when:
    - install.containerd.enabled | default(false) | bool
    - install.containerd.zfs.detect_uuid | default(false) | bool
  tags:
    - install_containerd
  block:
    - name: Fail if UUID not detected
      ansible.builtin.fail:
        msg: |
          Unable to detected ZFS Dataset UUID. Set "install.containerd.zfs.detect_uuid" to false
            or modify variable "containerd.zfs.zfs_uuid_detect_cmd" used to detect the UUID.
      when:
        - UUID.stdout | length == 0

    - name: Update uuid variable to detected UUID
      ansible.builtin.set_fact: # noqa no-free-form
        install.containerd.zfs.uuid = install.containerd.zfs.uuid + UUID.stdout
      when:
        - UUID.stdout | length > 0

# Install containerd packages and configure for ZFS support
- name: Install and Configure containerd Block
  when:
    - install.containerd.enabled | default(false) | bool
  tags:
    - install_containerd
  block:
    - name: Install containerd packages
      ansible.builtin.apt:
        name: "{{ containerd.packages }}"
        state: present

    - name: Create Containerd config path
      ansible.builtin.file:
        path: "{{ containerd.config_path }}"
        mode: "0755"
        state: directory

    - name: Start Containerd Service
      ansible.builtin.systemd:
        state: started
        name: containerd

    - name: Generate Default Containerd Configuration
      ansible.builtin.shell:
        cmd: "containerd config default > {{ containerd.config_path }}/{{ containerd.config_file }}"
      register: cmd
      changed_when: cmd.rc == 0

    - name: Confirm ZFS snapshotter has status ok
      ansible.builtin.shell:
        cmd: "ctr --address {{ containerd.runtime_endpoint }} plugins ls | grep zfs"
      register: zfs_snapshotter
      changed_when: zfs_snapshotter.rc == 0

    - name: Fail if ZFS snapshooter status is not ok
      ansible.builtin.fail:
        msg: "ZFS Snapshotter status not OK: {{ zfs_snapshotter.stdout }}"
      when:
        - zfs_snapshotter.stdout.find('snapshotter') == -1 or
          zfs_snapshotter.stdout.find('zfs') == -1 or
          zfs_snapshotter.stdout.find('ok') == -1

    - name: Stop Containerd Service
      ansible.builtin.systemd:
        state: stopped
        name: containerd
      notify:
        - Restart Containerd Service

    - name: Update snapshotter to zfs
      ansible.builtin.replace:
        path: "{{ containerd.config_path }}/{{ containerd.config_file }}"
        regexp: '(?m)snapshotter.*"overlayfs"'
        replace: 'snapshotter = "zfs"'

    - name: Update CNI Binary location
      ansible.builtin.replace:
        path: "{{ containerd.config_path }}/{{ containerd.config_file }}"
        regexp: '(?m)bin_dir.*"/opt/cni/bin"'
        replace: 'bin_dir = "{{ containerd.cni_dir_path }}"'

    - name: Create ZFS Mountpoint for Containerd
      community.general.zfs: # noqa yaml[line-length]
        name: "{{ install.containerd.zfs.pool }}/{{ install.containerd.zfs.dataset_prefix }}{{ install.containerd.zfs.uuid }}{{ install.containerd.zfs.dataset_postfix }}"
        extra_zfs_properties:
          mountpoint: "{{ containerd.zfs.zfs_mount_point }}"
        state: present

    - name: Copy Flannel Conflist File
      ansible.builtin.copy:
        src: "files/10-flannel.conflist"
        dest: "{{ containerd.flannel_conflist_path }}"
        mode: "0644"
      notify:
        - Restart Containerd Service
        - Restart k3s Service
        - Restart k3s-agent Service

- name: Flush Handlers
  ansible.builtin.meta: flush_handlers
  tags:
    - install_containerd
